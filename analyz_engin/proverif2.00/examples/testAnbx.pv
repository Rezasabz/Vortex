(* Protocol: testAnbx *)
(* ProVerif/Applied-pi specification mode: PV_Untyped *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator version 2022.02 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set traceBacktracking = true. 		(* true|false *)

(* Public channel declaration *)
free ch: channel.

(* Projectors *)
reduc forall x1:bitstring,x2:bitstring; proj_1_2((x1,x2)) = x1.
reduc forall x1:bitstring,x2:bitstring; proj_2_2((x1,x2)) = x2.

(* hash/hmac functions *)
fun hash(bitstring): bitstring.
fun hmac(bitstring,bitstring): bitstring.

(* Public key encryption *)
fun inv(bitstring): bitstring [private].
fun enc(bitstring,bitstring): bitstring.
    reduc forall x: bitstring, y: bitstring; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(bitstring): bitstring [private].
fun pk(bitstring): bitstring.
fun enc_pk(bitstring,bitstring): bitstring.
    reduc forall x: bitstring, y: bitstring; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(bitstring): bitstring [private].
fun hk(bitstring): bitstring.
fun enc_hk(bitstring,bitstring): bitstring.
    reduc forall x: bitstring, y: bitstring; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(bitstring): bitstring [private].
fun sk(bitstring): bitstring.
fun sign_sk(bitstring,bitstring): bitstring.
    reduc forall m: bitstring, k: bitstring; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: bitstring; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,bitstring): bitstring.
    reduc forall x: bitstring, y: bitstring; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: bitstring [data].
fun kas(bitstring,bitstring): bitstring.
fun kap(bitstring,bitstring): bitstring.
equation forall x: bitstring, y: bitstring; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: bitstring [data].
fun xor(bitstring,bitstring): bitstring.
equation forall x:bitstring,y:bitstring; xor(xor(x,y),y) = x.
equation forall x:bitstring; xor(x,zero) = x.
equation forall x:bitstring; xor(zero,x) = x.
equation forall x:bitstring; xor(x,x) = zero.

(* Functions *)
fun key(bitstring,bitstring): bitstring [private].

(* Variable agents *)
free A: bitstring.
free B: bitstring.

(* Constants *)
const empty: bitstring.

(* Goal queries *)
free InvpkINVPBB: bitstring [private].query attacker(InvpkINVPBB).
free InvpkINVPAA: bitstring [private].query attacker(InvpkINVPAA).
free MSGAB: bitstring [private].query attacker(MSGAB).
free MESSAGEAB: bitstring [private].query attacker(MESSAGEAB).
free KEYABAB: bitstring [private].query attacker(KEYABAB).
event witness_auth_MESSAGEAB(bitstring,bitstring,bitstring).
event witness_auth_MSGAB(bitstring,bitstring,bitstring).
event request_auth_MESSAGEAB(bitstring,bitstring,bitstring).
query m: bitstring, a1: bitstring, a2: bitstring; inj-event(request_auth_MESSAGEAB(m,a1,a2)) ==> inj-event(witness_auth_MESSAGEAB(m,a1,a2)).
event request_auth_MSGAB(bitstring,bitstring,bitstring).
query m: bitstring, a1: bitstring, a2: bitstring; inj-event(request_auth_MSGAB(m,a1,a2)) ==> inj-event(witness_auth_MSGAB(m,a1,a2)).

(* Process B *)
let process_B(A: bitstring,B: bitstring,InvpkB: bitstring,honestA: bitstring) =
in(ch,VAR_B_R0: bitstring);
let VAR_B_J12DSBR0KEYAB: bitstring = proj_1_2(decS(VAR_B_R0,key(A,B))) in 
if VAR_B_J12DSBR0KEYAB = VAR_B_J12DSBR0KEYAB then
event witness_auth_MESSAGEAB(VAR_B_J12DSBR0KEYAB,A,B);
event witness_auth_MSGAB(proj_2_2(decS(VAR_B_R0,key(A,B))),A,B);
out(ch,(VAR_B_J12DSBR0KEYAB,proj_2_2(decS(VAR_B_R0,key(A,B)))));
out(ch,encS(InvpkINVPBB,InvpkB));
if A = honestA then out(ch,encS(MSGAB,proj_2_2(decS(VAR_B_R0,key(A,B)))));
if A = honestA then out(ch,encS(MESSAGEAB,VAR_B_J12DSBR0KEYAB));
if A = honestA then out(ch,encS(KEYABAB,key(A,B)));
0.

(* Process A *)
let process_A(A: bitstring,B: bitstring,InvpkA: bitstring,honestB: bitstring) =
new Message: bitstring;
new Msg: bitstring;
out(ch,encS((Message,Msg),key(A,B)));
in(ch,VAR_A_R1: bitstring);
if VAR_A_R1 = (Message,Msg) then
out(ch,encS(InvpkINVPAA,InvpkA));
if B = honestB then event request_auth_MESSAGEAB(Message,A,B);
if B = honestB then event request_auth_MSGAB(Msg,A,B);
if B = honestB then out(ch,encS(MSGAB,Msg));
if B = honestB then out(ch,encS(MESSAGEAB,Message));
if B = honestB then out(ch,encS(KEYABAB,key(A,B)));
0.

(* Process testAnbx *)
let process_testAnbx(A: bitstring,B: bitstring) =
(!in(ch,XA: bitstring);
process_B(XA,B,priv_pk(B),A)) |
(!in(ch,XB: bitstring);
process_A(A,XB,priv_pk(A),B)).

(* Initialisation process *)
process
(!new X: bitstring;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X))
) | (
out(ch,A);
out(ch,B);
out(ch,pk(priv_pk(A)));
out(ch,pk(priv_pk(B)));
process_testAnbx(A,B))