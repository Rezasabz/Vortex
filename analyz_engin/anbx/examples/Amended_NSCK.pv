(* Protocol: Amended_NSCK *)
(* ProVerif/Applied-pi specification mode: PV_Untyped *)
(* Automatically generated by the *)
(* AnBx Compiler and Code Generator version 2022.02 *)

(* Some ProVerif settings *)
set ignoreTypes = false. 		(* true|false *)
set traceDisplay = none. 		(* short|long|none *)
set verboseRules = false. 		(* false|true *)
set verboseClauses = none. 		(* short|none|explained *)
set simplifyDerivation = true. 		(* true|false *)
set abbreviateDerivation = true. 		(* true|false *)
set traceBacktracking = true. 		(* true|false *)

(* Public channel declaration *)
free ch: channel.

(* Projectors *)
reduc forall x1:bitstring,x2:bitstring,x3:bitstring,x4:bitstring; proj_1_4((x1,x2,x3,x4)) = x1.
reduc forall x1:bitstring,x2:bitstring,x3:bitstring,x4:bitstring; proj_2_4((x1,x2,x3,x4)) = x2.
reduc forall x1:bitstring,x2:bitstring,x3:bitstring,x4:bitstring; proj_3_4((x1,x2,x3,x4)) = x3.
reduc forall x1:bitstring,x2:bitstring,x3:bitstring,x4:bitstring; proj_4_4((x1,x2,x3,x4)) = x4.
reduc forall x1:bitstring,x2:bitstring; proj_1_2((x1,x2)) = x1.
reduc forall x1:bitstring,x2:bitstring; proj_2_2((x1,x2)) = x2.
reduc forall x1:bitstring,x2:bitstring,x3:bitstring; proj_1_3((x1,x2,x3)) = x1.
reduc forall x1:bitstring,x2:bitstring,x3:bitstring; proj_2_3((x1,x2,x3)) = x2.
reduc forall x1:bitstring,x2:bitstring,x3:bitstring; proj_3_3((x1,x2,x3)) = x3.

(* hash/hmac functions *)
fun hash(bitstring): bitstring.
fun hmac(bitstring,bitstring): bitstring.

(* Public key encryption *)
fun inv(bitstring): bitstring [private].
fun enc(bitstring,bitstring): bitstring.
    reduc forall x: bitstring, y: bitstring; dec(enc(x,y),inv(y)) = x.

(* Public key encryption *)
fun priv_pk(bitstring): bitstring [private].
fun pk(bitstring): bitstring.
fun enc_pk(bitstring,bitstring): bitstring.
    reduc forall x: bitstring, y: bitstring; dec_pk(enc_pk(x,pk(y)),y) = x.
fun priv_hk(bitstring): bitstring [private].
fun hk(bitstring): bitstring.
fun enc_hk(bitstring,bitstring): bitstring.
    reduc forall x: bitstring, y: bitstring; dec_hk(enc_hk(x,hk(y)),y) = x.

(* Signatures *)
fun priv_sk(bitstring): bitstring [private].
fun sk(bitstring): bitstring.
fun sign_sk(bitstring,bitstring): bitstring.
    reduc forall m: bitstring, k: bitstring; getmess_sk(sign_sk(m,k)) = m.
    reduc forall m: bitstring, k: bitstring; verify_sk(sign_sk(m,k),sk(k)) = m.

(* Symmetric encryption *)
fun encS(bitstring,bitstring): bitstring.
    reduc forall x: bitstring, y: bitstring; decS(encS(x,y),y) = x.

(* Diffie-Hellman *)
const g: bitstring [data].
fun kas(bitstring,bitstring): bitstring.
fun kap(bitstring,bitstring): bitstring.
equation forall x: bitstring, y: bitstring; kas(kap(g,x),y) = kas(kap(g,y),x).

(* XOR - simple theory *)
(* Due to ProVerif limitation in handling certain types of equations, *)
(* some xor properties can not be modelled. Results may be not reliable *)
const zero: bitstring [data].
fun xor(bitstring,bitstring): bitstring.
equation forall x:bitstring,y:bitstring; xor(xor(x,y),y) = x.
equation forall x:bitstring; xor(x,zero) = x.
equation forall x:bitstring; xor(zero,x) = x.
equation forall x:bitstring; xor(x,x) = zero.

(* Functions *)
fun pre(bitstring): bitstring.

fun shk(bitstring,bitstring): bitstring [private].

(* Variable agents *)
free A: bitstring.
free B: bitstring.

(* Constants *)
const s: bitstring.

(* Secrecy assumptions *)
not attacker(new Invpks).
not attacker(new Invhks).
not attacker(new Invsks).

(* Goal queries *)
free chgoal_Confidential_NXNBBA: bitstring [private].query attacker(chgoal_Confidential_NXNBBA).
free NXNBAB: bitstring [private].query attacker(NXNBAB).
event witness_auth_NXNBAB(bitstring,bitstring,bitstring).
event witness_chgoal_FreshSecure_NXNBAB(bitstring,bitstring,bitstring).
event witness_auth_KXKABAs(bitstring,bitstring,bitstring).
event witness_auth_KXKABBs(bitstring,bitstring,bitstring).
event witness_auth_NXNBBA(bitstring,bitstring,bitstring).
event request_auth_KXKABBs(bitstring,bitstring,bitstring).
query m: bitstring, a1: bitstring, a2: bitstring; inj-event(request_auth_KXKABBs(m,a1,a2)) ==> inj-event(witness_auth_KXKABBs(m,a1,a2)).
event request_auth_KXKABAs(bitstring,bitstring,bitstring).
query m: bitstring, a1: bitstring, a2: bitstring; inj-event(request_auth_KXKABAs(m,a1,a2)) ==> inj-event(witness_auth_KXKABAs(m,a1,a2)).
event request_auth_NXNBAB(bitstring,bitstring,bitstring).
query m: bitstring, a1: bitstring, a2: bitstring; inj-event(request_auth_NXNBAB(m,a1,a2)) ==> inj-event(witness_auth_NXNBAB(m,a1,a2)).
event request_chgoal_FreshSecure_NXNBAB(bitstring,bitstring,bitstring).
query m: bitstring, a1: bitstring, a2: bitstring; inj-event(request_chgoal_FreshSecure_NXNBAB(m,a1,a2)) ==> inj-event(witness_chgoal_FreshSecure_NXNBAB(m,a1,a2)).
event request_auth_NXNBBA(bitstring,bitstring,bitstring).
query m: bitstring, a1: bitstring, a2: bitstring; inj-event(request_auth_NXNBBA(m,a1,a2)) ==> inj-event(witness_auth_NXNBBA(m,a1,a2)).

(* Process s *)
let process_s(A: bitstring,B: bitstring,honestA: bitstring,honestB: bitstring) =
in(ch,VAR_S_R2: bitstring);
let VAR_S_DSJ44SR2SHKBS: bitstring = decS(proj_4_4(VAR_S_R2),shk(B,s)) in 
if A = proj_1_2(VAR_S_DSJ44SR2SHKBS) then
if A = proj_1_4(VAR_S_R2) then
if B = proj_2_4(VAR_S_R2) then
new KxKAB: bitstring;
event witness_auth_KXKABAs(KxKAB,A,s);
event witness_auth_KXKABBs(KxKAB,B,s);
out(ch,encS((proj_3_4(VAR_S_R2),B,KxKAB,encS((KxKAB,proj_2_2(VAR_S_DSJ44SR2SHKBS),A),shk(B,s))),shk(A,s)));
0.

(* Process B *)
let process_B(A: bitstring,B: bitstring,honestA: bitstring) =
in(ch,VAR_B_R0: bitstring);
if A = VAR_B_R0 then
new NxNB: bitstring;
event witness_auth_NXNBAB(NxNB,A,B);
event witness_chgoal_FreshSecure_NXNBAB(NxNB,A,B);
new NxNB0: bitstring;
let VAR_B_SHKBS: bitstring = shk(B,s) in 
out(ch,encS((A,NxNB0),VAR_B_SHKBS));
in(ch,VAR_B_R4: bitstring);
let VAR_B_DSBR4BSHKBS: bitstring = decS(VAR_B_R4,VAR_B_SHKBS) in 
if A = proj_3_3(VAR_B_DSBR4BSHKBS) then
if NxNB0 = proj_2_3(VAR_B_DSBR4BSHKBS) then
let VAR_B_J13BDSBR4BSHKBS: bitstring = proj_1_3(VAR_B_DSBR4BSHKBS) in 
out(ch,encS(NxNB,VAR_B_J13BDSBR4BSHKBS));
in(ch,VAR_B_R6: bitstring);
if pre(NxNB) = decS(VAR_B_R6,VAR_B_J13BDSBR4BSHKBS) then
event request_auth_KXKABBs(VAR_B_J13BDSBR4BSHKBS,B,s);
if A = honestA then event request_auth_NXNBBA(NxNB,B,A);
if A = honestA then out(ch,encS(chgoal_Confidential_NXNBBA,NxNB));
if A = honestA then out(ch,encS(NXNBAB,NxNB));
0.

(* Process A *)
let process_A(A: bitstring,B: bitstring,honestB: bitstring) =
out(ch,A);
in(ch,VAR_A_R1: bitstring);
new NxNA: bitstring;
out(ch,(A,B,NxNA,VAR_A_R1));
in(ch,VAR_A_R3: bitstring);
let VAR_A_DSAR3SHKAS: bitstring = decS(VAR_A_R3,shk(A,s)) in 
if B = proj_2_4(VAR_A_DSAR3SHKAS) then
if NxNA = proj_1_4(VAR_A_DSAR3SHKAS) then
out(ch,proj_4_4(VAR_A_DSAR3SHKAS));
in(ch,VAR_A_R5: bitstring);
let VAR_A_J34ADSAR3SHKAS: bitstring = proj_3_4(VAR_A_DSAR3SHKAS) in 
if VAR_A_J34ADSAR3SHKAS = VAR_A_J34ADSAR3SHKAS then
let VAR_A_DSAR5AJ34ADSAR3SHKAS: bitstring = decS(VAR_A_R5,VAR_A_J34ADSAR3SHKAS) in 
if VAR_A_DSAR5AJ34ADSAR3SHKAS = VAR_A_DSAR5AJ34ADSAR3SHKAS then
event witness_auth_NXNBBA(VAR_A_DSAR5AJ34ADSAR3SHKAS,B,A);
out(ch,encS(pre(VAR_A_DSAR5AJ34ADSAR3SHKAS),VAR_A_J34ADSAR3SHKAS));
event request_auth_KXKABAs(VAR_A_J34ADSAR3SHKAS,A,s);
if B = honestB then event request_auth_NXNBAB(VAR_A_DSAR5AJ34ADSAR3SHKAS,A,B);
if B = honestB then event request_chgoal_FreshSecure_NXNBAB(VAR_A_DSAR5AJ34ADSAR3SHKAS,A,B);
if B = honestB then out(ch,encS(NXNBAB,VAR_A_DSAR5AJ34ADSAR3SHKAS));
0.

(* Process Amended_NSCK *)
let process_Amended_NSCK(A: bitstring,B: bitstring) =
(!in(ch,XA: bitstring);
in(ch,XB: bitstring);
process_s(XA,XB,A,B)) |
(!in(ch,XA: bitstring);
process_B(XA,B,A)) |
(!in(ch,XB: bitstring);
process_A(A,XB,B)).

(* Initialisation process *)
process
(!new X: bitstring;
out(ch,X);
out(ch,priv_pk(X));
out(ch,priv_hk(X));
out(ch,priv_sk(X));
out(ch,shk(X,s))
) | (
out(ch,A);
out(ch,B);
new Invpks: bitstring;
new Invhks: bitstring;
new Invsks: bitstring;
let pks = pk(Invpks) in out(ch,pks);
let hks = hk(Invhks) in out(ch,hks);
let sks = sk(Invsks) in out(ch,sks);
process_Amended_NSCK(A,B))